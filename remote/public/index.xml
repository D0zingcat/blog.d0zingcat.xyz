<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>For(;;);</title>
    <link>https://blog.d0zingcat.xyz/</link>
    <description>Recent content on For(;;);</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 05 Feb 2019 20:58:41 +0800</lastBuildDate>
    
	<atom:link href="https://blog.d0zingcat.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting Shadowsocks Libev With Obfs</title>
      <link>https://blog.d0zingcat.xyz/blog/setting-shadowsocks-libev-with-obfs/</link>
      <pubDate>Tue, 05 Feb 2019 20:58:41 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/setting-shadowsocks-libev-with-obfs/</guid>
      <description>今天是2019年2月5日，农历大年初一。但是今天发现昨天icloud photos加载不出来不是空穴来风，应该是GFW升级了之类导致的，起码在目前的网络环境下（江苏电信），是电脑和手机全线崩，不能访问Google的。
 所以第一时间考虑如何修复这个问题。但是对于我而言翻墙成本有以下几个需要考虑的点：
 多用户多端口（小伙伴们合租） 上网习惯了PAC模式自动切换代理开关 PAC模式可以随时新增网址（算是第2点的补充，这个列表需要不停地update）  但是先应急使用了Cisco Any connect（Open Connect Server，也就是ocserv），现在不比以前需要shell安装配置一大堆的东西，直接docker镜像跑一下即可。
docker run --name ocserv --privileged -p 8080:443 -p 8080:443/udp -d tommylau/ocserv  也就是内部端口443，映射到外部8080，主机没有配置iptables，然后果然在两个环境下都可以正常翻墙了，但是anyconnect有个我最不喜欢的地方就是全局代理，即便是通过CIDR进行智能路由，也存在着IP错杀或是不准确的情况，更新起来也必须要改服务端，很麻烦。所以就先作为一个应急手段吧。脑袋里就想起来破娃酱之前有发过一篇文章是关于识别ss的流量的，然后引发了巨大的争议和批判（而且还导致他删除了自己大部分的repo，当然，早期他的shadowsocksr-windows不开源也引发过很大的争议，但是没这次这么夸张，其实这个很不应该），所以就连带地想起来破娃酱的shadowsockr-windows的一个特性就是支持混淆，当然，那篇文章之后（前因后果就不谈了，感兴趣的自己去搜索吧）https://github.com/madeye也发过文章说明了一些情况，也给了解决方案－－混淆。所以这边我想先试着通过插件进行混淆流量能不能成功翻墙。
*闹了个乌龙，可能是主机程序原因高位端口被占用冲突了所以不能访问，改个端口问题得到了解决。*不过还是能继续捣鼓下去的，这边也记录下来。初步尝试v2ray-plugin，开启80端口混淆配上shadowsocksx-ng是可以正常访问的。不过距离我的tls混淆，以及多账户同端口共用（通过ng转发）的设想还有点远，所以目前先凑活用下去。等我下次捣鼓https混淆的时候，我就会完整地把过程记录下来了。</description>
    </item>
    
    <item>
      <title>2019.01.27</title>
      <link>https://blog.d0zingcat.xyz/blog/2019.01.27/</link>
      <pubDate>Sun, 27 Jan 2019 18:26:00 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2019.01.27/</guid>
      <description>生活总是充满了无穷无尽的困难，以及希望。
 最近越发地清楚地意识到了自己换工作是多么迫切的一件事情（虽然18年的3月份就有此打算但是不知道为何精力不够或者说自控力不够强导致一直延期延期或者得过且过，一直没能下定决心）。通过又是一年的工作，平时的工作内容，考虑到薪资待遇以及自己能力的成长，越发觉得上海某地方银行的信用卡中心是个不宜久留的地方，不然自己的人生都得搭进去。简单分析有以下几个原因：
 管理和“大”公司病。只注重文档和管理形式而非真的管理，管理异常混乱，各个团队各自为政，有能力的人得不到话语权反而是小丑一样只会装逼的人混的各种风生水起，排资论辈，各种规章流程规范满天飞，极度拖慢了各种事项的进展，同时也给开发人员带来了无穷无尽的杂活，常常忙了一天也不知道自己一天究竟做了什么，这是对生命的浪费。 薪资。当然，这个是我自己不够努力，在该学习的时候不学习没有一个好的学历和出身，所以显得非常廉价。但是我知道自己不只这个价钱，告诫自己：千里马拉习惯了磨，也就觉得自己是骡子。我相信自己的价值和能力。而且，我想*结婚*了。 团度氛围。本来刚入职的时候觉得整个项目组还是比较像一个大家庭的，但是莫名其妙的矛盾冲突越来越对，跟自己的项目组是这样，跟业务也是，跟测试也是，脾气越来越差，管理对自己的剥削越来越对，各种铁面制度或是瞎指挥，越来越让我觉得这边已经没有啥值得我留恋的。 技术成长。感觉自己技术的成长空间已经基本没有了（虽然浩哥~~~~@404notfound还有很多很多值得我学的，但是目前为止我并不想走单纯后台java业务开发的线路），所以是时候走了。 还是要多看看别人的公司和氛围以及别人在做的事情的，总是重复一件事情慢慢地都忽视了自己一直没有进步。  今天（本篇文章也是拖延症晚期系列的产出）刷微博的时候发现离职根本不需要这么多理由（请原谅我加戏了。。）：
因此，下文将记录一些我在准备面试或者说各种自己以前欠下的债的弥补内容。不得不说没有个985的硕士身份真的寸步难行。另外自己的人生没有在对的时候做对的事情，自己能力低微也是“罪有应得”。人生没有捷径，我该怎么弥补自己的错呢。。
面试题大纲 Java相关  乐观悲观锁   Tree(s)  treesort  参考： GOPL Page 101 ch4/treesort
代码实现如：
package treesort type Tree struct { val int left, right *Tree } func Add(root *Tree, val int) *Tree { if root == nil { t := new(Tree) t.val = val return t } if val &amp;lt; root.val { root.left = Add(root.</description>
    </item>
    
    <item>
      <title>2018-11-18</title>
      <link>https://blog.d0zingcat.xyz/blog/2018-11-18/</link>
      <pubDate>Sun, 18 Nov 2018 12:55:09 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2018-11-18/</guid>
      <description>这周刚巧基友在爬国学网站，爬出来的都是json，于是他想到了存在mongodb中，然后再导出为PDF。因为他跟我提了这件事情，联想到腾讯的招聘要求中有一条加分项就是了解过mongodb，心想自己也得去研究一下。于是准备安装。在mac下直接使用brew install mongodb结果炸了：
php@7.0 mongodb: A full installation of Xcode.app 8.3.2 is required to compile this software. Installing just the Command Line Tools is not sufficient. Xcode 8.3.2 cannot be installed on macOS 10.11. You must upgrade your version of macOS. Error: An unsatisfied requirement failed this build.  嗯，欺负我是黑苹果还是EI Capitan 也就是10.11没法升级没法安装最新的Xcode。嗯，只能另辟蹊径，那我装个docker吧。brew install docker 一切正常，但是当pull的时候提示unix socket未启动，我一想这不就是daemon线程没起么，各种命令敲完之后发现好像自己犯了个错，没有装全组件。brew search一下还真不少，不知道该装哪个了。Google之后发现要装docker-machine,docker-composer还有一堆虚拟化的东西要配，觉得好麻烦，就直接翻docker官网，发现有现成的docker app下载，直接下载解压打开，提示我一定要10.12之后才行，我一口老血。删除之，另找方法。突然转念一想，我不是有虚拟机么，虚拟机里面装个，在宿主机上连接就行啦。果断尝试，刚好我的ubuntu cosmic还是新鲜出炉的流畅地一塌糊涂，装起东西来也是飞快，不过当时用linuxbrew安装docker的时候也陷入了窘境，因为不知道该装哪个，毕竟brew是从OSX移植过来的，毕竟原始是针对Mac平台的。只能去翻docker的官方文档，步骤如下：
sudo apt install apt-transport-https ca-certificates curl software-properties-common curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88 sudo add-apt-repository &amp;quot;deb [arch=amd64] https://download.</description>
    </item>
    
    <item>
      <title>2018-10-24</title>
      <link>https://blog.d0zingcat.xyz/blog/2018-10-24/</link>
      <pubDate>Sat, 03 Nov 2018 19:04:17 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2018-10-24/</guid>
      <description>本周继续学习GOPL，在讲到defer语句的时候提到了很有意思的一个概念，是Linux中的file descriptor。简单来讲，linux在系统中都有一个唯一的id指向某个文件，例如0指向标准输入，1指向标准输出，2指向标准错误，3&amp;hellip;从3开始，直接指向到开启文件。最大1024，换言之如果同时开启的文件太多超过1021，那么就会出现Linux File Descriptor 耗尽的问题。以下为全文：
 File Descriptor
一个打开的文件通过唯一的描述符进行引用，该描述符是打开文件的元数据到文件本身的映射。在Linux内核中，这个描述符称为文件描述符（FileDescriptor），文件描述符用一个整数表示（C语言中的类型为int），简写为fd。文件描述符在用户空间（相对于内核空间而言，也就是我们应用程序的那层）中共享，允许用户程序用文件描述符直接访问文件。同一个文件能被不同或者相同的进程多次打开，每一个打开文件的实例（也就是java中的File类对象吧）都产生一个唯一的文件描述符。同一个描述符可以被多个进程使用。不同的进程能同时对一个文件进行读写，所以存在并发修改问题。
每个进程都有个映射文件物理地址的表格（0标准输入 1标准输出 2标准错误 3、4、5&amp;hellip;.就映射你打开过文件的地址） 进程间怎么通过FileDescriptor共享文件: 子进程继承父进程 地址表格的（父进程调用fork 生成子进程）
内核为每一个进程维护一个打开文件的列表，称为文件表（File Table），索引是fd，数据为打开文件的信息（包括一个指向文件的Inode对象的指针，和相关元数据，如当前文件文职、读取模式）。(Inode包含文件的物理地址) 简单的讲，也就是有了Map结构，key是fd，value是文件的信息（包括物理地址、读取模式。。。。。） 子进程默认获得一份父进程FIle Table的拷贝，而 更改一个进程的FileTable不会影响另一个进程（如果子进程关闭了文件 不会影响父进程的File Table），所以fd可以用来共享文件。fd用C语言的int表示非负整数，从0开始递增 直到默认上限1024。按照惯例每个进程至少有三个打开的文件描述符，除非进程显式的关闭他们： 0 标准输入（stdin），1标准输出（stdout），2标准错误（stderr）。
Conclusion
 fd的操作实际是系统内核API层次的，java的标准API没有直接相关的操作（据我已知，可以直接通过fd打开文件的） 进程关联一个类似Map的文件表，key是fd，value是文件的物理地址等等信息。 可以通过fd打开文件。 子进程copy父进程的文件表  Refer
Linux System Programming
FileDescriptor（文件描述符 ）与Linux文件系统</description>
    </item>
    
    <item>
      <title>2018-10-18</title>
      <link>https://blog.d0zingcat.xyz/blog/2018-10-18/</link>
      <pubDate>Sat, 03 Nov 2018 18:59:36 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2018-10-18/</guid>
      <description>本周因为公司需要搞个技术小组分享形式的内部会议，所以很匆忙地赶了一些粗制滥造的算法内容出来。主要有最简单的bfs、dfs、union-find、popcount等算法。以下为内容：
 Graph intro and definition
 subgraph connectivity trees and forest 3.1 simple unbalanced tree sort  BFS  Definition: A BFS traversal of a graph returns the nodes of the graph level by level. Application form: by queue  A queue is a line. If you’re the first to get in a bus line, you’re the first to get on the bus. First In, First Out.</description>
    </item>
    
    <item>
      <title>links</title>
      <link>https://blog.d0zingcat.xyz/links/</link>
      <pubDate>Sat, 03 Nov 2018 17:12:21 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/links/</guid>
      <description>Here are some blog recommendations for you.
 Droomo
Windranger
Xingo</description>
    </item>
    
    <item>
      <title>20180819本周总结</title>
      <link>https://blog.d0zingcat.xyz/blog/20180819%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 19 Aug 2018 17:21:41 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/20180819%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>这周没有看太多书，值得留下的东西寥寥无几。
 GDB image not found error
最近因为觉得golang的editor LiteIDE已经很好用了，所以就尝试着用了一把。结果在debug的时候过（需要提前装好GDB，我直接使用的brew进行安装的，也就是brew install gdb），但是当直接在终端中键入的时候会报错：
dyld: Library not loaded: /usr/local/opt/mpfr/lib/libmpfr.6.dylib以及image not found
的类似错误。但是Google并没有告诉我答案，只是找到一个类似的相近的问题和回答：dyld: Library not loaded: /usr/local/lib/libmpfr.4.dylib。看到了人家提到了brew，于是继续顺藤摸瓜搜索了dyld，查到了这个OS X / MPFR，看到brew install mpfr便尝试了下，神奇地发现居然问题解决了。GDB又可以用了！
当然，额外可以提一句的是，在尝试对golang 程序进行debug的过程中，其实GDB并不是那么强大（比如并不支持goroutine），也发现了个替代品：delve 有兴趣的可以自行研究一下子～</description>
    </item>
    
    <item>
      <title>Use Gpg Signing for Github</title>
      <link>https://blog.d0zingcat.xyz/blog/use-gpg-signing-for-github/</link>
      <pubDate>Sat, 28 Jul 2018 20:39:40 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/use-gpg-signing-for-github/</guid>
      <description>A few days ago, I notiecd that when creating a new file or delete that on Github, on the right-hand side, the commits will display a &amp;ldquo;Verified&amp;rdquo; sign. Just look like following:
Looks really cool, isn&amp;rsquo;t it? So, I&amp;rsquo;ve tried to make this thing appear on every commit(especially on local pc/laptop, using git client) I&amp;rsquo;ve submit, but not soon I&amp;rsquo;ve encountered a lot and a lot troubles(when your os is OS X).</description>
    </item>
    
    <item>
      <title>Upgrade Git on Mac</title>
      <link>https://blog.d0zingcat.xyz/blog/upgrade-git-on-mac/</link>
      <pubDate>Sat, 28 Jul 2018 08:54:04 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/upgrade-git-on-mac/</guid>
      <description>Recently, I&amp;rsquo;ve tried to use GnuPG signing my commits, but some wierd phenomemon appear. To eliminate other factors that affect the problem, I&amp;rsquo;ve tried to upgrade my Git release on Mac OS X.
 check git version and back up original git version
$ git &amp;ndash;version git version 2.10.1 (Apple Git-78) $ sudo mv /usr/bin/git /usr/bin/git-apple
 Update homebrew(already installed supposed)
$ brew update &amp;amp;&amp;amp; brew upgrade
  If you&amp;rsquo;ve not heard Homebrew or not installed before, install brew firstly.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.d0zingcat.xyz/about/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/about/</guid>
      <description>做平凡的事，成为一个平凡的人 。
 Recently, I&amp;rsquo;ve been&amp;hellip;
Reading    Bookname Progress     The Go Programming Language 55%   Java核心技术·卷 I（原书第10版） 10%   Linux命令行与shell脚本编程大全 10%   Erlang程序设计（第2版） 50%   Erlang趣学指南 30%   飄 &amp;#10003;   駱駝祥子 &amp;#10003;   大亨小傳 &amp;#10003;   Nineteen Eighty-Four &amp;#10003;   穆斯林的葬禮 &amp;#10003;   Black Beauty &amp;#10003;   Twenty Thousand Leagues Under the Sea &amp;#10003;   King Arthur &amp;#10003;    Watching    Bookname Progress     高级语言程序设计（Python）CAP 50%   TED Talk of the Week: Nature.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://blog.d0zingcat.xyz/license/</link>
      <pubDate>Tue, 07 Nov 2017 23:07:29 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/license/</guid>
      <description>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</description>
    </item>
    
    <item>
      <title>Home</title>
      <link>https://blog.d0zingcat.xyz/home/</link>
      <pubDate>Tue, 07 Nov 2017 21:47:07 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/home/</guid>
      <description>What keeps us alive, more important than blood or oxygen or even love, is hope.</description>
    </item>
    
  </channel>
</rss>