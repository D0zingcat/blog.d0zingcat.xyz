<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>For(;;);</title>
    <link>https://blog.d0zingcat.xyz/</link>
    <description>Recent content on For(;;);</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.d0zingcat.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>https://blog.d0zingcat.xyz/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>https://blog.d0zingcat.xyz/blog/migrate-to-hugo-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/migrate-to-hugo-from-jekyll/</guid>
      <description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png  should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png  Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description>
    </item>
    
    <item>
      <title>2018-10-24</title>
      <link>https://blog.d0zingcat.xyz/blog/2018-10-24/</link>
      <pubDate>Sat, 03 Nov 2018 19:04:17 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2018-10-24/</guid>
      <description>本周继续学习GOPL，在讲到defer语句的时候提到了很有意思的一个概念，是Linux中的file descriptor。简单来讲，linux在系统中都有一个唯一的id指向某个文件，例如0指向标准输入，1指向标准输出，2指向标准错误，3&amp;hellip;从3开始，直接指向到开启文件。最大1024，换言之如果同时开启的文件太多超过1022，那么就会出现Linux File Descriptor 耗尽的问题。以下为全文：
 File Descriptor
一个打开的文件通过唯一的描述符进行引用，该描述符是打开文件的元数据到文件本身的映射。在Linux内核中，这个描述符称为文件描述符（FileDescriptor），文件描述符用一个整数表示（C语言中的类型为int），简写为fd。文件描述符在用户空间（相对于内核空间而言，也就是我们应用程序的那层）中共享，允许用户程序用文件描述符直接访问文件。同一个文件能被不同或者相同的进程多次打开，每一个打开文件的实例（也就是java中的File类对象吧）都产生一个唯一的文件描述符。同一个描述符可以被多个进程使用。不同的进程能同时对一个文件进行读写，所以存在并发修改问题。
每个进程都有个映射文件物理地址的表格（0标准输入 1标准输出 2标准错误 3、4、5&amp;hellip;.就映射你打开过文件的地址） 进程间怎么通过FileDescriptor共享文件: 子进程继承父进程 地址表格的（父进程调用fork 生成子进程）
内核为每一个进程维护一个打开文件的列表，称为文件表（File Table），索引是fd，数据为打开文件的信息（包括一个指向文件的Inode对象的指针，和相关元数据，如当前文件文职、读取模式）。(Inode包含文件的物理地址) 简单的讲，也就是有了Map结构，key是fd，value是文件的信息（包括物理地址、读取模式。。。。。） 子进程默认获得一份父进程FIle Table的拷贝，而 更改一个进程的FileTable不会影响另一个进程（如果子进程关闭了文件 不会影响父进程的File Table），所以fd可以用来共享文件。fd用C语言的int表示非负整数，从0开始递增 直到默认上限1024。按照惯例每个进程至少有三个打开的文件描述符，除非进程显式的关闭他们： 0 标准输入（stdin），1标准输出（stdout），2标准错误（stderr）。
Conclusion
 fd的操作实际是系统内核API层次的，java的标准API没有直接相关的操作（据我已知，可以直接通过fd打开文件的） 进程关联一个类似Map的文件表，key是fd，value是文件的物理地址等等信息。 可以通过fd打开文件。 子进程copy父进程的文件表  Refer
Linux System Programming
FileDescriptor（文件描述符 ）与Linux文件系统</description>
    </item>
    
    <item>
      <title>2018-10-18</title>
      <link>https://blog.d0zingcat.xyz/blog/2018-10-18/</link>
      <pubDate>Sat, 03 Nov 2018 18:59:36 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2018-10-18/</guid>
      <description>本周因为公司需要搞个技术小组分享形式的内部会议，所以很匆忙地赶了一些粗制滥造的算法内容出来。主要有最简单的bfs、dfs、union-find、popcount等算法。以下为内容：
 Graph intro and definition
 subgraph connectivity trees and forest 3.1 simple unbalanced tree sort  BFS  Definition: A BFS traversal of a graph returns the nodes of the graph level by level. Application form: by queue  A queue is a line. If you’re the first to get in a bus line, you’re the first to get on the bus. First In, First Out.</description>
    </item>
    
    <item>
      <title>links</title>
      <link>https://blog.d0zingcat.xyz/links/</link>
      <pubDate>Sat, 03 Nov 2018 17:12:21 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/links/</guid>
      <description>Here are some blog recommendations for you.
 Droomo
Windranger
Xingo</description>
    </item>
    
    <item>
      <title>20180819本周总结</title>
      <link>https://blog.d0zingcat.xyz/blog/20180819%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 19 Aug 2018 17:21:41 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/20180819%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>这周没有看太多书，值得留下的东西寥寥无几。
 GDB image not found error
最近因为觉得golang的editor LiteIDE已经很好用了，所以就尝试着用了一把。结果在debug的时候过（需要提前装好GDB，我直接使用的brew进行安装的，也就是brew install gdb），但是当直接在终端中键入的时候会报错：
dyld: Library not loaded: /usr/local/opt/mpfr/lib/libmpfr.6.dylib以及image not found
的类似错误。但是Google并没有告诉我答案，只是找到一个类似的相近的问题和回答：dyld: Library not loaded: /usr/local/lib/libmpfr.4.dylib。看到了人家提到了brew，于是继续顺藤摸瓜搜索了dyld，查到了这个OS X / MPFR，看到brew install mpfr便尝试了下，神奇地发现居然问题解决了。GDB又可以用了！
当然，额外可以提一句的是，在尝试对golang 程序进行debug的过程中，其实GDB并不是那么强大（比如并不支持goroutine），也发现了个替代品：delve 有兴趣的可以自行研究一下子～</description>
    </item>
    
    <item>
      <title>Use Gpg Signing for Github</title>
      <link>https://blog.d0zingcat.xyz/blog/use-gpg-signing-for-github/</link>
      <pubDate>Sat, 28 Jul 2018 20:39:40 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/use-gpg-signing-for-github/</guid>
      <description>A few days ago, I notiecd that when creating a new file or delete that on Github, on the right-hand side, the commits will display a &amp;ldquo;Verified&amp;rdquo; sign. Just look like following:
Looks really cool, isn&amp;rsquo;t it? So, I&amp;rsquo;ve tried to make this thing appear on every commit(especially on local pc/laptop, using git client) I&amp;rsquo;ve submit, but not soon I&amp;rsquo;ve encountered a lot and a lot troubles(when your os is OS X).</description>
    </item>
    
    <item>
      <title>Upgrade Git on Mac</title>
      <link>https://blog.d0zingcat.xyz/blog/upgrade-git-on-mac/</link>
      <pubDate>Sat, 28 Jul 2018 08:54:04 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/upgrade-git-on-mac/</guid>
      <description>Recently, I&amp;rsquo;ve tried to use GnuPG signing my commits, but some wierd phenomemon appear. To eliminate other factors that affect the problem, I&amp;rsquo;ve tried to upgrade my Git release on Mac OS X.
 check git version and back up original git version
$ git &amp;ndash;version git version 2.10.1 (Apple Git-78) $ sudo mv /usr/bin/git /usr/bin/git-apple
 Update homebrew(already installed supposed)
$ brew update &amp;amp;&amp;amp; brew upgrade
  If you&amp;rsquo;ve not heard Homebrew or not installed before, install brew firstly.</description>
    </item>
    
    <item>
      <title>Core Java Learning</title>
      <link>https://blog.d0zingcat.xyz/blog/core-java-learning/</link>
      <pubDate>Mon, 16 Apr 2018 08:14:09 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/core-java-learning/</guid>
      <description>最近发生了许多事情，对身边的人的看法有了一些变化，觉得自己能力不足，不足以改变一些偏见或是愚见，也觉得自己慢慢地在被同辈人拉开距离，顿时有了危机感。因此重开荒废已久的博客，准备记录下我从此开始的学习的痕迹。而起点，就是我写了一年的业务代码的基础，Java。所以定下计划1个月内把java核心技术看完。这篇文章将会记录下一些疑问或是总结。
 ​ 2018.04.16 第三章－Java基本程序设计结构</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.d0zingcat.xyz/about/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/about/</guid>
      <description>Recently, I&amp;rsquo;ve been&amp;hellip;
Reading    Bookname progress     The Go Programming Language 55%   Java核心技术·卷 I（原书第10版） 10%   Linux命令行与shell脚本编程大全 10%   飄 100%   駱駝祥子 100%   大亨小傳 100%   Nineteen Eighty-Four 100%   穆斯林的葬禮 100%    Watching 高级语言程序设计（Python）CAP
Attending Here is a list of some meaningful or meaningless things that I&amp;rsquo;ve done before.
   Time Activity     2017.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://blog.d0zingcat.xyz/license/</link>
      <pubDate>Tue, 07 Nov 2017 23:07:29 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/license/</guid>
      <description>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</description>
    </item>
    
    <item>
      <title>Home</title>
      <link>https://blog.d0zingcat.xyz/home/</link>
      <pubDate>Tue, 07 Nov 2017 21:47:07 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/home/</guid>
      <description>What keeps us alive, more important than blood or oxygen or even love, is hope.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>https://blog.d0zingcat.xyz/blog/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>https://blog.d0zingcat.xyz/blog/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>