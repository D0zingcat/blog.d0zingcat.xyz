<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>For(;;);</title>
    <link>https://blog.d0zingcat.xyz/</link>
    <description>Recent content on For(;;);</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 24 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://blog.d0zingcat.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Resources</title>
      <link>https://blog.d0zingcat.xyz/resources/</link>
      <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/resources/</guid>
      <description>Recently, I&amp;rsquo;ve been&amp;hellip;
Reading    Name Progress     Python教程 70%   The Go Programming Language 55%   Erlang程序设计（第2版） 50%   Erlang趣学指南 30%   飄 &amp;#10003;   駱駝祥子 &amp;#10003;   大亨小傳 &amp;#10003;   Nineteen Eighty-Four &amp;#10003;   穆斯林的葬禮 &amp;#10003;   Black Beauty &amp;#10003;   Twenty Thousand Leagues Under the Sea &amp;#10003;   King Arthur &amp;#10003;   活着 &amp;#10003;   许三观卖血记 &amp;#10003;   嫌疑人X的献身 &amp;#10003;   Vater und Sohn &amp;#10003;   兄弟 &amp;#10003;    Watching    Name Progress     高级语言程序设计（Python）CAP 50%   TED Talk of the Week: Nature.</description>
    </item>
    
    <item>
      <title>推荐使用Beancount来记账及部署私服记录</title>
      <link>https://blog.d0zingcat.xyz/blog/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8beancount%E6%9D%A5%E8%AE%B0%E8%B4%A6%E5%8F%8A%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%8D%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Wed, 12 Jun 2019 22:40:43 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8beancount%E6%9D%A5%E8%AE%B0%E8%B4%A6%E5%8F%8A%E9%83%A8%E7%BD%B2%E7%A7%81%E6%9C%8D%E8%AE%B0%E5%BD%95/</guid>
      <description>在郭大神的《在Google的這四年》系列文章中提到了他是一个重度记账用户，他选择使用beancount 来进行他的日常记账工作，于是从这里我接触到了double-entry accounting，也就是复式簿记啦，感兴趣的可以自己主动去google具体的原理等，其实我也只是一知半解，仅停留在知道是啥而已。但是其实账目相平，从不同的桶将豆子都来倒去的原理让我耳目一新，因为之前自己的记账方式太过原始，只是简单记录下自己的花销等。当消费习惯引入了信用卡，花呗等贷记方式之后就会发现记账变得非常困难（比如还款和具体交易金额无法区分），只是能看到自己的花费而不能明白如：自己的钱从哪来，又到了哪去这个问题。于是我选择尝试一下beancount。
说白了beancount就是一个基于python的记账工具，他定义了一套自己独有的语法，让我们可以通过一个文本编辑器就可以轻松地开始记账，自己保存好自己的记账文件就不会出现使用记账app数据无法导出，或是突然倒闭/开发者跑路数据丢失的问题。主要的参考文档还是官方的，开发者非常勤奋贡献了很多文档，但是可能全是英文的对国内的使用者而言非常的不友好，所以这边主要推荐几个我看的：
Beancount複式記賬（一）
Beancount —— 命令行复式簿记
beancount 起步
Beancount使用经验
beancount 简易入门指南
基础认识｜利用 Beancount 打造个人的记账系统（1）
也基本算是中文圈中能找到的&amp;rdquo;大部分&amp;rdquo;文章了。这边不对语法做过多的介绍，请感兴趣的同学自己翻阅这些文章（其实还有其他文章写的也很好，请自行google），写的可比我好多了靠谱多了，而且我目前只是停留在记录日常流水（消费习惯比较单一，支付方式只有支付宝、微信、常用的两张借记卡、两张双币信用卡、花呗，基本不用现金，偶尔互相发发红包，连朋友间的垫付、借款以及其他大牛说的用beancount记录债券投资、折现之类的强大的特性一个都没用到，也没有实现其他大牛实现的自动话导入账单，举个例子就是郭大神的三篇文章我只看了两篇就急不可耐地开始记起了帐，搞起了后面的这些东西，可能现在需求还比较单一，之后如果有什么新的折腾的话可能会补充在这边），我仅介绍我的一些小的tips。
采用git管理文件历史 这个比较好解释，毕竟git可以追溯到文件的历史版本。我推荐使用bitbucket的私有仓库，这样就可以保证数据的安全性，也可以通过这个来实现多平台的简单同步（服务器和本地）。
开户文件独立开来 我的目录形式为:
./ppb(可能意思是personal private beancount) |__main.bean |__accounts.bean  accounts中只存储开户相关的，比如我的就是：
1970-01-01 open Assets:Cash 1970-01-01 open Assets:Bank:CN:BOCOM 1970-01-01 open Assets:Bank:CN:SPDB 1970-01-01 open Assets:Bank:CN:CMB 1970-01-01 open Assets:Org:CN:ALIPAY 1970-01-01 open Assets:Org:CN:WECHAT 1970-01-01 open Assets:Pension:CN:SH 1970-01-01 open Assets:Provident:CN:SH 1970-01-01 open Liabilities:CreditCard:SPDB 1970-01-01 open Liabilities:CreditCard:CMB 1970-01-01 open Liabilities:ALIPAY 1970-01-01 open Income:Lilith:Salary 1970-01-01 open Income:Redpacket 1970-01-01 open Expenses:Clothing 1970-01-01 open Expenses:Other 1970-01-01 open Expenses:Food 1970-01-01 open Expenses:Transport:Metro 1970-01-01 open Expenses:Transport:Airline 1970-01-01 open Expenses:Transport:Railway 1970-01-01 open Expenses:Transport:Coach 1970-01-01 open Expenses:Transport:Texi 1970-01-01 open Expenses:Housing:Rent 1970-01-01 open Expenses:Housing:Utilities 1970-01-01 open Expenses:Health:Medical 1970-01-01 open Expenses:Love 1970-01-01 open Expenses:Life 1970-01-01 open Expenses:Leave 1970-01-01 open Expenses:Tax 1970-01-01 open Expenses:Cloud 1970-01-01 open Expenses:Entertainment 1970-01-01 open Expenses:Travel 1970-01-01 open Expenses:Electronics  分类仅供参考，因为我就补了6月起的账单所以还没统计全我的所有消费类别。然后定义完了这个文件之后呢在 main.</description>
    </item>
    
    <item>
      <title>Manage python project configurations</title>
      <link>https://blog.d0zingcat.xyz/blog/manage-python-project-configurations/</link>
      <pubDate>Fri, 03 May 2019 11:02:09 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/manage-python-project-configurations/</guid>
      <description>When working on a python project I&amp;rsquo;ve been thinking how to manage the configurations in an elegant way, just like the &amp;lsquo;maven-way&amp;rsquo;(use a placeholder and replace them when packaging). Here are some points I care about:
 separate development and production configs easy to use, no need to include third party packages safe, will not be committed to git repo by mistake out-of-box, no need to modify the code to run on production or development environment  As I have such requirements, after researching I finally choose this way to handle it.</description>
    </item>
    
    <item>
      <title>Setting Shadowsocks Libev With Obfs</title>
      <link>https://blog.d0zingcat.xyz/blog/setting-shadowsocks-libev-with-obfs/</link>
      <pubDate>Tue, 05 Feb 2019 20:58:41 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/setting-shadowsocks-libev-with-obfs/</guid>
      <description>今天是2019年2月5日，农历大年初一。但是今天发现昨天icloud photos加载不出来不是空穴来风，应该是GFW升级了之类导致的，起码在目前的网络环境下（江苏电信），是电脑和手机全线崩，不能访问Google的。
 所以第一时间考虑如何修复这个问题。但是对于我而言翻墙成本有以下几个需要考虑的点：
 多用户多端口（小伙伴们合租） 上网习惯了PAC模式自动切换代理开关 PAC模式可以随时新增网址（算是第2点的补充，这个列表需要不停地update）  但是先应急使用了Cisco Any connect（Open Connect Server，也就是ocserv），现在不比以前需要shell安装配置一大堆的东西，直接docker镜像跑一下即可。
docker run --name ocserv --privileged -p 8080:443 -p 8080:443/udp -d tommylau/ocserv  也就是内部端口443，映射到外部8080，主机没有配置iptables，然后果然在两个环境下都可以正常翻墙了，但是anyconnect有个我最不喜欢的地方就是全局代理，即便是通过CIDR进行智能路由，也存在着IP错杀或是不准确的情况，更新起来也必须要改服务端，很麻烦。所以就先作为一个应急手段吧。脑袋里就想起来破娃酱之前有发过一篇文章是关于识别ss的流量的，然后引发了巨大的争议和批判（而且还导致他删除了自己大部分的repo，当然，早期他的shadowsocksr-windows不开源也引发过很大的争议，但是没这次这么夸张，其实这个很不应该），所以就连带地想起来破娃酱的shadowsockr-windows的一个特性就是支持混淆，当然，那篇文章之后（前因后果就不谈了，感兴趣的自己去搜索吧）https://github.com/madeye也发过文章说明了一些情况，也给了解决方案－－混淆。所以这边我想先试着通过插件进行混淆流量能不能成功翻墙。
*闹了个乌龙，可能是主机程序原因高位端口被占用冲突了所以不能访问，改个端口问题得到了解决。*不过还是能继续捣鼓下去的，这边也记录下来。初步尝试v2ray-plugin，开启80端口混淆配上shadowsocksx-ng是可以正常访问的。不过距离我的tls混淆，以及多账户同端口共用（通过ng转发）的设想还有点远，所以目前先凑活用下去。等我下次捣鼓https混淆的时候，我就会完整地把过程记录下来了。</description>
    </item>
    
    <item>
      <title>2018-10-18</title>
      <link>https://blog.d0zingcat.xyz/blog/2018-10-18/</link>
      <pubDate>Sat, 03 Nov 2018 18:59:36 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/2018-10-18/</guid>
      <description>本周因为公司需要搞个技术小组分享形式的内部会议，所以很匆忙地赶了一些粗制滥造的算法内容出来。主要有最简单的bfs、dfs、union-find、popcount等算法。以下为内容：
 Graph intro and definition
 subgraph connectivity trees and forest 3.1 simple unbalanced tree sort  BFS  Definition: A BFS traversal of a graph returns the nodes of the graph level by level. Application form: by queue  A queue is a line. If you’re the first to get in a bus line, you’re the first to get on the bus. First In, First Out.</description>
    </item>
    
    <item>
      <title>links</title>
      <link>https://blog.d0zingcat.xyz/links/</link>
      <pubDate>Sat, 03 Nov 2018 17:12:21 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/links/</guid>
      <description>Here are some blog recommendations for you.
 Droomo
Windranger
Xingo</description>
    </item>
    
    <item>
      <title>Use Gpg Signing for Github</title>
      <link>https://blog.d0zingcat.xyz/blog/use-gpg-signing-for-github/</link>
      <pubDate>Sat, 28 Jul 2018 20:39:40 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/use-gpg-signing-for-github/</guid>
      <description>A few days ago, I notiecd that when creating a new file or delete that on Github, on the right-hand side, the commits will display a &amp;ldquo;Verified&amp;rdquo; sign. Just look like following:
Looks really cool, isn&amp;rsquo;t it? So, I&amp;rsquo;ve tried to make this thing appear on every commit(especially on local pc/laptop, using git client) I&amp;rsquo;ve submit, but not soon I&amp;rsquo;ve encountered a lot and a lot troubles(when your os is OS X).</description>
    </item>
    
    <item>
      <title>Upgrade Git on Mac</title>
      <link>https://blog.d0zingcat.xyz/blog/upgrade-git-on-mac/</link>
      <pubDate>Sat, 28 Jul 2018 08:54:04 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/upgrade-git-on-mac/</guid>
      <description>Recently, I&amp;rsquo;ve tried to use GnuPG signing my commits, but some wierd phenomemon appear. To eliminate other factors that affect the problem, I&amp;rsquo;ve tried to upgrade my Git release on Mac OS X.
 check git version and back up original git version
$ git &amp;ndash;version git version 2.10.1 (Apple Git-78) $ sudo mv /usr/bin/git /usr/bin/git-apple
 Update homebrew(already installed supposed)
$ brew update &amp;amp;&amp;amp; brew upgrade
  If you&amp;rsquo;ve not heard Homebrew or not installed before, install brew firstly.</description>
    </item>
    
    <item>
      <title>20180819本周总结</title>
      <link>https://blog.d0zingcat.xyz/blog/20180819%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 03 Jul 2018 13:26:50 +0800</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/blog/20180819%E6%9C%AC%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>这周没有看太多书，值得留下的东西寥寥无几。
 GDB image not found error
最近因为觉得golang的editor LiteIDE已经很好用了，所以就尝试着用了一把。结果在debug的时候过（需要提前装好GDB，我直接使用的brew进行安装的，也就是brew install gdb），但是当直接在终端中键入的时候会报错：
dyld: Library not loaded: /usr/local/opt/mpfr/lib/libmpfr.6.dylib以及image not found
的类似错误。但是Google并没有告诉我答案，只是找到一个类似的相近的问题和回答：dyld: Library not loaded: /usr/local/lib/libmpfr.4.dylib。看到了人家提到了brew，于是继续顺藤摸瓜搜索了dyld，查到了这个OS X / MPFR，看到brew install mpfr便尝试了下，神奇地发现居然问题解决了。GDB又可以用了！
当然，额外可以提一句的是，在尝试对golang 程序进行debug的过程中，其实GDB并不是那么强大（比如并不支持goroutine），也发现了个替代品：delve 有兴趣的可以自行研究一下子～</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://blog.d0zingcat.xyz/about/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://blog.d0zingcat.xyz/about/</guid>
      <description>做平凡的事，成为一个平凡的人 。
不戚戚于贫贱，不汲汲于富贵。
心有猛虎，细嗅蔷薇。
 Hi! I&amp;rsquo;m Lee Tang, currently working at Lilith Games titled backend developer. I used to coding in Python, Golang, Java and at present I&amp;rsquo;m in love with Elixir and Erlang. Maybe in future I&amp;rsquo;ll contirbute to this &amp;ldquo;About&amp;rdquo; Page.
你好👋我的名字是汤力，目前就职于莉莉丝游戏，职位是指令翻译机，立志成为一名手艺人。我会使用Python，Golang，Java进行编程，目前沉醉于Elixir和Erlang无法自拔。也许在未来的某天我会试着更新这个&amp;rdquo;关于我&amp;rdquo;页面。</description>
    </item>
    
  </channel>
</rss>